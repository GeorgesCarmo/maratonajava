package QConcorrencia;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

public class CompletableFutureTest04 {
	public static void main(String[] args) {
		StoreServiceWithDiscount service = new StoreServiceWithDiscount();
		searchPricesWithDiscount(service);
//		searchPricesWithDiscountAsync(service);
	}
	
	private static void searchPricesWithDiscount(StoreServiceWithDiscount service) {
		long start = System.currentTimeMillis();
		List<String> stores = List.of("Store 1", "Store 2","Store 3","Store 4");
//		stores.forEach(s -> System.out.println(service.getPriceSync(s)));
		stores.stream()
			.map(service::getPriceSync)
			.map(Quote::newQuote)
			.map(service::ApplyDiscount)
			.forEach(System.out::println);
		long end = System.currentTimeMillis();
		System.out.printf("Time passed to searchPriceSync %dms%n", end-start);
	}
	
	private static void searchPricesWithDiscountAsync(StoreServiceWithDiscount service) {
		long start = System.currentTimeMillis();
		List<String> stores = List.of("Store 1", "Store 2","Store 3","Store 4");
		
		List<CompletableFuture<String>> completableFutures = stores.stream()
			.map(s -> CompletableFuture.supplyAsync(() -> service.getPriceSync(s))) //Getting the price async storeName:price:discountCode
			.map(cf -> cf.thenApply(Quote::newQuote)) // Instantiating a new quote from the generated by getPriceSync
			.map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(() -> service.ApplyDiscount(quote)))) // Composing the first completable future
			.collect(Collectors.toList());
		
		completableFutures.stream()
			.map(CompletableFuture::join)
			.forEach(System.out::println);
		
		long end = System.currentTimeMillis();
		System.out.printf("Time passed to searchPriceSync %dms%n", end-start);
	}
}
